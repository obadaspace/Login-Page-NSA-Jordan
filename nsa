<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NSA Jordan | Student Login</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts as a fallback for SF Pro Display -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* * As requested, here is the @font-face rule.
         * For this to work, you must have the font file named 'SFPRODISPLAYMEDIUM.OTF'
         * in the same directory as this HTML file.
         * I've used 'Inter' from Google Fonts as a fallback.
        */
        @font-face {
            font-family: 'SF Pro Display';
            /* Make sure the font file is accessible at this path */
            src: url('SFPRODISPLAYMEDIUM.OTF') format('opentype');
            font-weight: normal;
            font-style: normal;
        }

        body, input, select, button, h1, h2, h3, p, a {
            font-family: 'SF Pro Display', 'Inter', sans-serif;
        }
        
        /* Custom class for the main application view to prevent flash of unstyled content */
        .app-container {
            display: none;
        }

        /* Add a subtle transition for form switching */
        .form-container {
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        }
        .form-hidden {
            opacity: 0;
            transform: scale(0.95);
            position: absolute;
            pointer-events: none;
        }
    </style>
</head>
<body class="bg-black text-gray-800 flex items-center justify-center min-h-screen">

    <!-- Loading Spinner -->
    <div id="loader" class="absolute inset-0 flex items-center justify-center bg-black z-50">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-white"></div>
    </div>

    <!-- Main Application Container -->
    <div id="app" class="app-container w-full">
        <!-- Login & Signup Section -->
        <div id="auth-container" class="w-full max-w-md mx-auto p-4 md:p-0">
            <div class="bg-white rounded-xl shadow-2xl p-8 md:p-12 relative overflow-hidden">
                <!-- Login Form -->
                <div id="login-form" class="form-container">
                    <h2 class="text-3xl font-bold mb-2 text-center">Welcome Back</h2>
                    <p class="text-gray-500 mb-8 text-center">Please sign in to your account.</p>
                    <form onsubmit="handleLogin(event)">
                        <div class="mb-4">
                            <label for="login-email" class="block text-sm font-medium text-gray-600 mb-2">Email</label>
                            <input type="email" id="login-email" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        </div>
                        <div class="mb-6">
                            <label for="login-password" class="block text-sm font-medium text-gray-600 mb-2">Password</label>
                            <input type="password" id="login-password" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        </div>
                        <button type="submit" class="w-full bg-black text-white py-3 rounded-lg font-semibold hover:bg-gray-800 transition shadow-md">Sign In</button>
                    </form>
                    <p class="text-center text-sm text-gray-500 mt-6">
                        Don't have an account? <a href="#" onclick="toggleForms(event)" class="font-medium text-blue-600 hover:underline">Sign Up</a>
                    </p>
                </div>
                <!-- Signup Form -->
                <div id="signup-form" class="form-container form-hidden">
                    <h2 class="text-3xl font-bold mb-2 text-center">Create Account</h2>
                    <p class="text-gray-500 mb-8 text-center">Join our student community.</p>
                    <form onsubmit="handleSignup(event)">
                        <div class="mb-4">
                            <label for="signup-email" class="block text-sm font-medium text-gray-600 mb-2">Email</label>
                            <input type="email" id="signup-email" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        </div>
                        <div class="mb-4">
                            <label for="signup-password" class="block text-sm font-medium text-gray-600 mb-2">Password</label>
                            <input type="password" id="signup-password" required minlength="6" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                        </div>
                        <div class="mb-6">
                             <label for="major" class="block text-sm font-medium text-gray-600 mb-2">Major</label>
                             <select id="major" required class="w-full px-4 py-3 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
                                 <option value="Doctor of Medicine">Doctor of Medicine</option>
                                 <option value="Dentistry">Dentistry</option>
                             </select>
                        </div>
                        <button type="submit" class="w-full bg-black text-white py-3 rounded-lg font-semibold hover:bg-gray-800 transition shadow-md">Sign Up</button>
                    </form>
                    <p class="text-center text-sm text-gray-500 mt-6">
                        Already have an account? <a href="#" onclick="toggleForms(event)" class="font-medium text-blue-600 hover:underline">Sign In</a>
                    </p>
                </div>
                <!-- Error Message Display -->
                <div id="error-message" class="mt-4 text-center text-red-500 text-sm font-medium"></div>
            </div>
        </div>

        <!-- Protected Content: Medical Students -->
        <div id="medical-page" class="hidden w-full max-w-4xl mx-auto p-4 md:p-0">
            <div class="bg-white rounded-xl shadow-2xl p-8 md:p-12 text-center">
                <h1 class="text-4xl font-bold mb-4">Medical Student Portal</h1>
                <p class="text-gray-600 mb-8 text-lg">Welcome! Access your resources below.</p>
                <a href="https://nsajordan.com/home/#medical-students" target="_blank" class="inline-block bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition shadow-md mb-8">Go to Medical Resources</a>
                <button onclick="handleLogout()" class="w-full md:w-auto bg-gray-200 text-gray-800 px-8 py-3 rounded-lg font-semibold hover:bg-gray-300 transition">Logout</button>
            </div>
        </div>
        
        <!-- Protected Content: Dental Students -->
        <div id="dental-page" class="hidden w-full max-w-4xl mx-auto p-4 md:p-0">
            <div class="bg-white rounded-xl shadow-2xl p-8 md:p-12 text-center">
                <h1 class="text-4xl font-bold mb-4">Dental Student Portal</h1>
                <p class="text-gray-600 mb-8 text-lg">Welcome! Access your resources below.</p>
                <a href="https://nsajordan.com/home/#dental-students" target="_blank" class="inline-block bg-green-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-green-700 transition shadow-md mb-8">Go to Dental Resources</a>
                <button onclick="handleLogout()" class="w-full md:w-auto bg-gray-200 text-gray-800 px-8 py-3 rounded-lg font-semibold hover:bg-gray-300 transition">Logout</button>
            </div>
        </div>

    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        // Using a more recent stable version of Firebase SDK
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { 
            getAuth, 
            createUserWithEmailAndPassword, 
            signInWithEmailAndPassword, 
            onAuthStateChanged,
            signOut
        } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            setDoc, 
            getDoc 
        } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBLPhyV1aOcSI2vCtLXnta9fkA3LrfENls",
            authDomain: "nsaloginjo.firebaseapp.com",
            projectId: "nsaloginjo",
            storageBucket: "nsaloginjo.appspot.com", // Corrected storage bucket name
            messagingSenderId: "804670177161",
            appId: "1:804670177161:web:570d3c8a1432696b3b2b58",
            measurementId: "G-6FN87QJZ81"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- UI Element References ---
        const loader = document.getElementById('loader');
        const appContainer = document.getElementById('app');
        const authContainer = document.getElementById('auth-container');
        const loginFormEl = document.getElementById('login-form');
        const signupFormEl = document.getElementById('signup-form');
        const medicalPage = document.getElementById('medical-page');
        const dentalPage = document.getElementById('dental-page');
        const errorMessageDiv = document.getElementById('error-message');
        
        let isLoginView = true;

        // --- Global Functions for Event Handlers ---
        window.toggleForms = (event) => {
            event.preventDefault();
            isLoginView = !isLoginView;
            if (isLoginView) {
                loginFormEl.classList.remove('form-hidden');
                signupFormEl.classList.add('form-hidden');
            } else {
                loginFormEl.classList.add('form-hidden');
                signupFormEl.classList.remove('form-hidden');
            }
            errorMessageDiv.textContent = ''; // Clear errors on toggle
        };

        window.handleLogin = async (event) => {
            event.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            errorMessageDiv.textContent = '';
            try {
                await signInWithEmailAndPassword(auth, email, password);
                // onAuthStateChanged will handle the redirect
            } catch (error) {
                console.error("Login Error:", error);
                errorMessageDiv.textContent = getFriendlyErrorMessage(error.code);
            }
        };

        window.handleSignup = async (event) => {
            event.preventDefault();
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            const major = document.getElementById('major').value;
            errorMessageDiv.textContent = '';

            try {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                const user = userCredential.user;

                // Store user's major in Firestore
                await setDoc(doc(db, "users", user.uid), {
                    major: major,
                    email: user.email
                });

                // onAuthStateChanged will handle showing the correct page
            } catch (error) {
                console.error("Signup Error:", error);
                errorMessageDiv.textContent = getFriendlyErrorMessage(error.code);
            }
        };

        window.handleLogout = async () => {
            try {
                await signOut(auth);
                // onAuthStateChanged will handle UI reset
            } catch (error) {
                console.error("Logout Error:", error);
                errorMessageDiv.textContent = "Failed to log out. Please try again.";
            }
        };
        
        // --- Authentication State Listener (Core Logic) ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                // User is signed in
                try {
                    const userDocRef = doc(db, "users", user.uid);
                    const userDocSnap = await getDoc(userDocRef);

                    if (userDocSnap.exists()) {
                        const userData = userDocSnap.data();
                        // Hide auth forms, show correct page
                        authContainer.classList.add('hidden');
                        if (userData.major === "Doctor of Medicine") {
                            medicalPage.classList.remove('hidden');
                        } else if (userData.major === "Dentistry") {
                            dentalPage.classList.remove('hidden');
                        } else {
                            // Fallback if major is not set
                            console.error("User major not found!");
                            authContainer.classList.remove('hidden');
                        }
                    } else {
                        // This case can happen if a user is authenticated but their data is missing.
                        console.error("No user data found in Firestore!");
                        handleLogout(); // Log them out to be safe
                    }
                } catch (error) {
                    console.error("Error fetching user data:", error);
                    handleLogout(); // Log out on error
                }
            } else {
                // User is signed out
                authContainer.classList.remove('hidden');
                medicalPage.classList.add('hidden');
                dentalPage.classList.add('hidden');
            }
            // Hide loader and show the app content once auth state is resolved
            loader.style.display = 'none';
            appContainer.style.display = 'block';
        });

        // --- Utility Function ---
        function getFriendlyErrorMessage(errorCode) {
            switch (errorCode) {
                case 'auth/invalid-email':
                    return 'Please enter a valid email address.';
                case 'auth/user-not-found':
                case 'auth/wrong-password':
                case 'auth/invalid-credential':
                    return 'Invalid email or password. Please try again.';
                case 'auth/email-already-in-use':
                    return 'An account with this email already exists.';
                case 'auth/weak-password':
                    return 'Password should be at least 6 characters long.';
                default:
                    return 'An unexpected error occurred. Please try again.';
            }
        }
    </script>

</body>
</html>

